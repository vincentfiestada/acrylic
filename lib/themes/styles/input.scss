@import "animation";
@import "utils";

@mixin highlight($color) {
	border-color: $color;
	box-shadow: 0 $shadow-width / 2 $shadow-width rgba($color, 0.4);
}

@mixin invalid {
	@include highlight($color-danger);
	&:active,
	&:focus {
		@include highlight($color-danger);
	}
	& + .comment {
		@include highlight($color-danger);
		background: $color-danger;
		color: contrastingColor($color-danger);
	}
}

@mixin disabled {
	outline: none;
	background: unset;
	cursor: not-allowed;
	border: dotted $border-width lighten($color-border, 20);
	&:active,
	&:focus {
		border: dotted $border-width lighten($color-border, 20);
		box-shadow: none;
	}
}

@mixin comment($color) {
	@extend %subtle-transition;
	@extend %text-smaller;
	background: $color;
	padding: $spacing-unit;
	margin: $spacing-unit 0 0 0;
	color: contrastingColor($color);
	border-radius: $border-radius;
}

%text-smaller {
	font-size: 0.9em;
}

%placeholder {
	color: rgba($color-foreground, 0.5);
}

%field-label {
	@extend %text-smaller;
	padding: 0;
	margin: 0 0 $spacing-unit / 2 0;
}

@mixin text-box($color1, $color2) {
	@extend %subtle-transition;
	margin: 0;
	resize: none;
	cursor: text;
	outline: none;
	padding: $spacing-unit;
	color: $color-foreground;
	background: $color-background;
	border: solid $border-width $color1;
	border-top-left-radius: $border-radius;
	border-top-right-radius: $border-radius;
	border-bottom-left-radius: 0;
	border-bottom-right-radius: 0;
	&:last-child {
		border-bottom-left-radius: $border-radius;
		border-bottom-right-radius: $border-radius;
	}
	&:not(:read-only) {
		&:active,
		&:focus {
			@include highlight($color2);
			& + .comment {
				@extend %text-smaller;
				@include highlight($color2);
				background: $color2;
				color: contrastingColor($color2);
			}
		}
	}
	&:invalid {
		@include invalid();
	}
	&:disabled {
		@include disabled();
	}
	&::placeholder {
		@extend %placeholder;
	}
}

@mixin text-field($color1, $color2) {
	padding: 0;
	margin: $spacing-unit;
	flex-direction: column;
	label {
		@extend %field-label;
	}
	.input {
		@include text-box($color1, $color2);
	}
	.comment {
		@include comment($color1);
		margin: 0;
		border-top-left-radius: 0;
		border-top-right-radius: 0;
	}
	&.required {
		label:after {
			content: "*";
			color: $color-danger;
			margin: 0 0.5ch;
		}
	}
	&.read-only {
		.input {
			border: unset;
			cursor: unset;
			box-shadow: unset;
			background: unset;
			padding: $spacing-unit / 2 0;
		}
		.comment {
			color: $color1;
			border: unset;
			background: unset;
			box-shadow: unset;
			padding: $spacing-unit / 2 0;
		}
	}
	&.invalid {
		.input:not(:read-only) {
			@include invalid();
		}
		.comment {
			color: $color-danger;
		}
	}
}

%text-field {
	@include text-field($color-border, $color-accent);
	&.acr-variant-primary {
		@include text-field($color-accent, $color-accent);
	}
	&.acr-variant-success {
		@include text-field($color-success, $color-success);
	}
	&.acr-variant-warning {
		@include text-field($color-warning, $color-warning);
	}
	&.acr-variant-danger {
		@include text-field($color-danger, $color-danger);
	}
}

.acr-text-field {
	@extend %text-field;
	display: inline-flex;
	width: 20 * $spacing-unit;
}
.acr-text-area {
	@extend %text-field;
	display: flex;
	.input {
		height: 3.5em;
		align-self: stretch;
		&:read-only {
			height: fit-content;
		}
	}
}

@mixin checkbox($color1, $color2) {
	$size: 1.5em;
	$checkmark-fill: contrastingColor($color2);
	padding: 0;
	min-width: 20ch;
	margin: $spacing-unit;
	* {
		padding: 0;
		margin: 0;
		flex: 0 1 auto;
	}
	label {
		padding: 0;
		margin: 0 0 0 $spacing-unit / 2;
	}
	.input {
		opacity: 0;
		border: none;
		width: $size;
		height: $size;
		outline: none;
		cursor: pointer;
	}
	.checkbox {
		@extend %subtle-transition;
		width: $size;
		height: $size;
		display: inline-flex;
		flex-direction: row;
		align-items: stretch;
		justify-content: stretch;
		padding: 0;
		margin: 0;
		margin-left: -$size;
		border: {
			width: $border-width;
			style: solid;
			color: $color1;
			radius: $border-radius;
		}
		box-sizing: border-box;
		background: $color-background;
		.checkmark {
			@extend %subtle-transition;
			flex: 1;
			margin: 0;
			width: $size;
			height: $size;
			display: none;
			padding: 0.1 * $size;
			align-self: center;
			justify-self: center;
			stroke-width: $border-width;
			stroke: $checkmark-fill;
			fill: $checkmark-fill;
		}
	}
	.input:checked + .checkbox {
		background: $color2;
		border-color: $color2;
		.checkmark {
			display: inline-block;
		}
	}
	.input:disabled {
		cursor: not-allowed;
		& + .checkbox {
			@include disabled();
		}
		&:checked + .checkbox {
			$checkmark-fill: contrastingColor(darken($color-background, 20));
			.checkmark {
				fill: $checkmark-fill;
				stroke: $checkmark-fill;
			}
		}
	}
	&:not(.read-only) .input:hover:not(:disabled) + .checkbox {
		@include highlight($color2);
	}
	.comment {
		@include comment($color1);
	}
	&.required {
		label:after {
			content: "*";
			color: $color-danger;
			margin: 0 0.5ch;
		}
	}
	&.invalid:not(.read-only) {
		.input {
			& + .checkbox {
				@include invalid();
				$checkmark-fill: contrastingColor($color-danger);
				.checkmark {
					fill: $checkmark-fill;
					stroke: $checkmark-fill;
				}
			}
			&:checked + .checkbox {
				background: $color-danger;
			}
			&:hover:not(:disabled) + .checkbox {
				@include highlight($color-danger);
			}
		}
	}
	&.invalid .comment {
		background: $color-danger;
		@include highlight($color-danger);
	}
	&.read-only {
		.input {
			cursor: unset;
		}
		.input + .checkbox {
			background: $color-background;
			border-color: $color1;
			.checkmark {
				fill: $color1;
				stroke: $color1;
			}
		}
		.comment {
			border: unset;
			color: $color1;
			background: unset;
			box-shadow: unset;
			padding: $spacing-unit / 2 0;
		}
		&.invalid {
			.input + .checkbox {
				@include invalid();
				.checkmark {
					fill: $color-danger;
					stroke: $color-danger;
				}
			}
			.comment {
				color: $color-danger;
			}
		}
	}
}

%checkbox {
	@include checkbox($color-border, $color-accent);
	&.acr-variant-primary {
		@include checkbox($color-accent, $color-accent);
	}
	&.acr-variant-success {
		@include checkbox($color-success, $color-success);
	}
	&.acr-variant-warning {
		@include checkbox($color-warning, $color-warning);
	}
	&.acr-variant-danger {
		@include checkbox($color-danger, $color-danger);
	}
}

.acr-checkbox {
	@extend %checkbox;
	display: inline-flex;
}

@mixin option($color1, $color2) {
	$size: 1.5em;
	$shade-fill: $color2;
	display: inline-flex;
	margin: $spacing-unit / 2 0;
	flex-direction: row;
	align-items: center;
	justify-content: center;
	* {
		padding: 0;
		margin: 0;
		flex: 0 1 auto;
	}
	.input {
		opacity: 0;
		width: $size;
		height: $size;
		outline: none;
		cursor: pointer;
		border-radius: 50%;
	}
	.circle {
		@extend %subtle-transition;
		width: $size;
		height: $size;
		display: inline-flex;
		flex-direction: row;
		align-items: stretch;
		justify-content: stretch;
		margin-left: -$size;
		border: {
			width: $border-width;
			style: solid;
			color: $color1;
			radius: 50%;
		}
		background: $color-background;
		& + label {
			padding: 0;
			margin: 0 0 0 $spacing-unit / 2;
		}
	}
	.shade {
		@extend %subtle-transition;
		width: $size;
		height: $size;
		display: inline-flex;
		box-sizing: border-box;
		align-self: center;
		justify-self: center;
		border: {
			radius: 50%;
			style: solid;
			width: 0.2 * $size;
			color: $color-background;
		}
	}
	.input:checked + .circle {
		border-color: $color2;
		.shade {
			background: $color2;
		}
	}
	.input:hover:not(:disabled) + .circle {
		@include highlight($color2);
	}
	.input:disabled {
		cursor: not-allowed;
		& + .circle {
			@include disabled();
		}
		&:checked + .circle {
			.shade {
				background: contrastingColor(darken($color-background, 20));
			}
		}
	}
	&.invalid .comment {
		background: $color-danger;
		@include highlight($color-danger);
	}
}

@mixin options($color1, $color2) {
	padding: 0;
	min-width: 20ch;
	margin: $spacing-unit;
	.option {
		@include option($color1, $color2);
		&.acr-variant-primary {
			@include option($color-accent, $color-accent);
		}
		&.acr-variant-success {
			@include option($color-success, $color-success);
		}
		&.acr-variant-warning {
			@include option($color-warning, $color-warning);
		}
		&.acr-variant-danger {
			@include option($color-danger, $color-danger);
		}
	}
	.comment {
		@include comment($color1);
	}
	& > label {
		@extend %field-label;
	}
	&.required > label:after {
		content: "*";
		color: $color-danger;
		margin: 0 0.5ch;
	}
	&.invalid:not(.read-only) {
		.option {
			@include option($color-danger, $color-danger);
			.circle {
				@include invalid();
				border-color: $color-danger;
			}
		}
		.comment {
			@include invalid();
			background: $color-danger;
			color: contrastingColor($color-danger);
		}
	}
	&.read-only {
		.input {
			display: none;
			& + .circle {
				display: none;
				& + label {
					margin: 0;
				}
			}
		}
		.comment {
			margin: 0;
			border: unset;
			color: $color1;
			background: unset;
			box-shadow: unset;
			padding: $spacing-unit / 2 0;
		}
		&.invalid .comment {
			color: $color-danger;
		}
	}
}

%options {
	@include options($color-border, $color-accent);
	&.acr-variant-primary {
		@include options($color-accent, $color-accent);
	}
	&.acr-variant-success {
		@include options($color-success, $color-success);
	}
	&.acr-variant-warning {
		@include options($color-warning, $color-warning);
	}
	&.acr-variant-danger {
		@include options($color-danger, $color-danger);
	}
}

.acr-options {
	@extend %options;
}

@mixin select($color1, $color2) {
	padding: 0;
	position: relative;
	margin: $spacing-unit;
	label {
		@extend %field-label;
	}
	.input {
		@include text-box($color1, $color2);
		display: flex;
		flex-direction: row;
		align-items: center;
		cursor: pointer;
		align-self: stretch;
		box-sizing: border-box;
		min-width: 20 * $spacing-unit;
		&:active,
		&:focus {
			@include highlight($color2);
		}
	}
	.placeholder {
		@extend %placeholder;
	}
	.comment {
		@include comment($color1);
		margin: 0;
		border-top-left-radius: 0;
		border-top-right-radius: 0;
		align-self: stretch;
	}
	.toggle-btn {
		margin: 0;
		align-self: end;
	}
	&.required {
		label:after {
			content: "*";
			color: $color-danger;
			margin: 0 0.5ch;
		}
		.input {
			@include highlight($color-danger);
		}
	}
	&.disabled:not(.read-only) {
		.input {
			@include disabled();
		}
	}
	&.invalid:not(.read-only) {
		.input {
			@include invalid();
		}
		.comment {
			background: $color-danger;
			color: contrastingColor($color-danger);
		}
	}
	&.read-only {
		.input {
			border: unset;
			cursor: unset;
			box-shadow: unset;
			background: unset;
			padding: $spacing-unit / 2 0;
		}
		.comment {
			color: $color1;
			border: unset;
			background: unset;
			box-shadow: unset;
			padding: $spacing-unit / 2 0;
		}
		&.invalid {
			.comment {
				color: $color-danger;
			}
		}
	}
	.menu {
		z-index: 50;
		position: absolute;
		margin: {
			top: $shadow-width;
			left: 0;
			right: 0;
			bottom: 0;
		}
	}
}

%select {
	@include select($color-border, $color-accent);
	&.acr-variant-primary {
		@include select($color-accent, $color-accent);
	}
	&.acr-variant-success {
		@include select($color-success, $color-success);
	}
	&.acr-variant-warning {
		@include select($color-warning, $color-warning);
	}
	&.acr-variant-danger {
		@include select($color-danger, $color-danger);
	}
}

.acr-select {
	@extend %select;
}
